@page "/fetchdata"
@inject HttpClient Http


<PageTitle>Weather Forecast</PageTitle>

<h1>Weather Forecast</h1>


<input type="text" @bind="@City" placeholder="City Name"/>
<button type="submit" @onclick="NewCall">Get Weather</button>


@if (forecasts == null)
{
    <p><em>@message</em></p>
}
else
{
    <h4>@forecasts.region</h4>
    var today = DateTime.Today;
    <h4>Today: @today.ToShortDateString()</h4>
    <p>Temp (F): @forecasts.currentConditions.temp.f</p>
    <p>Precipitation: @forecasts.currentConditions.precip</p>
    <p>Humidity: @forecasts.currentConditions.humidity</p>
    <p>Wind: @forecasts.currentConditions.wind.mile mph</p>
    <p>@forecasts.currentConditions.comment</p>
    
    <table class="table">
        <thead>
            <tr>
                <th>Day</th>
                <th> Min Temp. (F)</th>
                <th>Max Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts.next_days)
            {
                <tr>
                <td>@forecast.day</td>
                <td>@forecast.min_temp.f</td>
                <td>@forecast.max_temp.f</td>
                <td>@forecast.comment</td>
                </tr>
            }
        </tbody>
    </table>
    
}

@code {

    private WeatherForecast? forecasts;

    private string City;

    private string message = "Please enter city name";

    // This will load the data right when the page loads
    // I want to wait till user enters city
    //protected override async Task OnInitializedAsync()
    //{
    //forecasts = await Http.GetFromJsonAsync<WeatherForecast>("seattle");

    //}

    public async Task NewCall()
    {
        message = "Loading...";
        forecasts = null;
        forecasts = await Http.GetFromJsonAsync<WeatherForecast>(City);
    }

    public class WeatherForecast
    {
        public string region { get; set; }

        public CurrentConditions currentConditions { get; set; }

        public Forecast[] next_days { get; set; }

        public AuthorInfo contact_author { get; set; }

        public string data_source { get; set; }

    }

    public class CurrentConditions
    {
        public string dayHour { get; set; }

        public Temp temp { get; set; }

        public string precip { get; set; }

        public string humidity { get; set; }

        public Wind wind { get; set; }

        public string iconURL { get; set; }

        public string comment { get; set; }
    }

    public class Forecast
    {
        public string day { get; set; }

        public string comment { get; set; }

        public MaxTemp max_temp {get; set;}

        public MinTemp min_temp { get; set; }

        public string iconURL { get; set; }
    }

    public class AuthorInfo
    {
        public string email { get; set; }

        public string auth_note { get; set; }
    }

    public class Temp
    {
        public int c { get; set; }
        public int f { get; set; }
    }

    public class Wind
    {
        public int km { get; set; }
        public int mile { get; set; }
    }

    public class MaxTemp
    {
        public int c { get; set; }
        public int f { get; set; }
    }

    public class MinTemp
    {
        public int c { get; set; }
        public int f { get; set; }
    }
}
